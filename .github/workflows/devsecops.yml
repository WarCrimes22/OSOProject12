name: DevSecOps Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Cotygodniowe skanowanie w poniedziaÅ‚ki o 2:00

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 1. Budowanie i testy podstawowe
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # PeÅ‚na historia dla GitLeaks

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test

    - name: Build application
      run: npm run build --if-present

  # 2. Skanowanie sekretÃ³w (GitLeaks)
  secrets-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # 3. Analiza zaleÅ¼noÅ›ci (SCA)
  dependency-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: NPM Audit
      run: |
        npm audit --audit-level=high --json > npm-audit.json || true
        npm audit --audit-level=high

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'juice-shop'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7

    - name: Upload Dependency Check Results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  # 4. Analiza statyczna kodu (SAST)
  sast-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Semgrep
      run: pip install semgrep

    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-results.json .
        semgrep --config=auto --severity=ERROR --severity=WARNING .

    - name: Install Bandit (Python)
      run: pip install bandit[toml]

    - name: Run Bandit (if Python files exist)
      run: |
        if find . -name "*.py" -type f | head -1 | grep -q .; then
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -ll
        fi

    - name: Upload SAST Results
      uses: actions/upload-artifact@v4
      with:
        name: sast-results
        path: |
          semgrep-results.json
          bandit-report.json

  # 5. Budowanie obrazu Docker
  docker-build:
    runs-on: ubuntu-latest
    needs: [secrets-scan, dependency-scan, sast-scan]
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # 6. Skanowanie obrazu Docker
  docker-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # 7. Testy dynamiczne (DAST)
  dast-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      juice-shop:
        image: ${{ needs.docker-build.outputs.image }}
        ports:
          - 3000:3000
        options: --health-cmd="curl -f http://localhost:3000/rest/admin/application-version" --health-interval=30s --health-timeout=10s --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for application
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:3000/rest/admin/application-version; do sleep 5; done'

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: 'security/zap-baseline.conf'
        cmd_options: '-a -j -m 5 -T 60'

    - name: Run Nikto Web Scanner
      run: |
        docker run --rm --network host \
          -v $(pwd):/report \
          sullo/nikto \
          -h http://localhost:3000 \
          -output /report/nikto-report.xml \
          -Format xml

    - name: Upload DAST Results
      uses: actions/upload-artifact@v4
      with:
        name: dast-results
        path: |
          report_html.html
          report_json.json
          nikto-report.xml

  # 8. Agregacja wynikÃ³w i raportowanie
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, docker-scan, dast-scan]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate Security Report
      run: |
        mkdir -p security-reports
        echo "# Security Scan Report - $(date)" > security-reports/summary.md
        echo "" >> security-reports/summary.md
        
        echo "## Pipeline Status" >> security-reports/summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-reports/summary.md
        echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-reports/summary.md
        echo "- Docker Scan: ${{ needs.docker-scan.result }}" >> security-reports/summary.md
        echo "- DAST Scan: ${{ needs.dast-scan.result }}" >> security-reports/summary.md
        echo "" >> security-reports/summary.md
        
        # Zliczanie podatnoÅ›ci
        if [ -f "dependency-check-report/dependency-check-report.json" ]; then
          DEPS_HIGH=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "HIGH")] | length' dependency-check-report/dependency-check-report.json)
          DEPS_CRITICAL=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.severity == "CRITICAL")] | length' dependency-check-report/dependency-check-report.json)
          echo "- Dependencies: $DEPS_CRITICAL Critical, $DEPS_HIGH High" >> security-reports/summary.md
        fi

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-reports/

    - name: Comment PR with Security Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-reports/summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## ðŸ”’ Security Scan Results\n\n' + summary
          });

  # 9. Deployment (opcjonalny)
  deploy:
    runs-on: ubuntu-latest
    needs: [security-report]
    if: github.ref == 'refs/heads/main' && success()
    environment: production
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Tu moÅ¼na dodaÄ‡ rzeczywisty deployment
